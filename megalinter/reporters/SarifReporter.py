#!/usr/bin/env python3
"""
Produce SARIF report
"""
import json
import logging
import os

from megalinter import Reporter, config


class SarifReporter(Reporter):
    name = "SARIF"
    scope = "mega-linter"
    report_type = "simple"

    def __init__(self, params=None):
        # Deactivate JSON output by default
        self.is_active = False
        self.processing_order = (
            - 9999  # Run first
        )
        super().__init__(params)

    def manage_activation(self):
        if config.get("SARIF_REPORTER", "false") == "true":
            self.is_active = True

    def produce_report(self):
        sarif_obj = {
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
            "version": "2.1.0",
                "properties": {
                    "comment": "Generated by MegaLinter"
                },
            "runs": []
        }
        # Build unique SARIF file with all SARIF output files
        for linter in self.master.linters:
            if linter.sarif_output_file is not None:
                with open(linter.sarif_output_file, "r", encoding="utf-8") as linter_sarif_file:
                    linter_sarif_obj = json.load(linter_sarif_file)
                sarif_obj["runs"] += linter_sarif_obj["runs"]
        result_json = json.dumps(sarif_obj, sort_keys=True, indent=4)
        # Write output file
        sarif_file_name = f"{self.report_folder}{os.path.sep}" + config.get(
            "SARIF_REPORTER_FILE_NAME", "mega-linter-report.sarif"
        )
        with open(sarif_file_name, "w", encoding="utf-8") as sarif_file:
            sarif_file.write(result_json)
            logging.info(
                f"[SARIF Reporter] Generated {self.name} report: {sarif_file_name}"
            )

    def filter_fields(self, obj, fields_to_keep):
        for field in dir(obj):
            if (
                not field.startswith("__")
                and not callable(getattr(obj, field))
                and (
                    (len(fields_to_keep) > 0 and field not in fields_to_keep)
                    or getattr(obj, field, None) is None
                )
            ):
                try:
                    delattr(obj, field)
                except:  # noqa: E722
                    pass
        return obj
