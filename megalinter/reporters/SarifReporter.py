#!/usr/bin/env python3
"""
Produce SARIF report
"""
import json
import logging
import os
import random
from json.decoder import JSONDecodeError

from megalinter import Linter, Reporter, config, utils
from megalinter.constants import (
    DEFAULT_SARIF_REPORT_FILE_NAME,
    DEFAULT_SARIF_SCHEMA_URI,
    DEFAULT_SARIF_VERSION,
    ML_DOC_URL,
)
from megalinter.utils import normalize_log_string
from megalinter.utils_reporter import get_linter_doc_url


class SarifReporter(Reporter):
    name = "SARIF"
    scope = "mega-linter"
    report_type = "simple"

    def __init__(self, params=None):
        # Deactivate JSON output by default
        self.is_active = False
        self.processing_order = -9999  # Run first
        super().__init__(params)

    def manage_activation(self):
        if not utils.can_write_report_files(self.master):
            self.is_active = False
        elif config.get("SARIF_REPORTER", "false") == "true":
            self.is_active = True

    def produce_report(self):
        sarif_obj = {
            "$schema": DEFAULT_SARIF_SCHEMA_URI,
            "version": DEFAULT_SARIF_VERSION,
            "properties": {
                "comment": "Generated by MegaLinter",
                "docUrl": ML_DOC_URL,
                "dockerImage": {
                    "buildDate": config.get("BUILD_DATE", ""),
                    "buildRevision": config.get("BUILD_REVISION", ""),
                    "buildVersion": config.get("BUILD_VERSION", ""),
                    "flavor": config.get("MEGALINTER_FLAVOR", "none"),
                    "singleLinter": config.get("SINGLE_LINTER", ""),
                },
            },
            "runs": [],
        }
        # Check delete linter SARIF file if LOG_FILE=none
        keep_sarif_logs = True
        if config.get("LOG_FILE", "") == "none":
            keep_sarif_logs = False
        # Build unique SARIF file with all SARIF output files
        for linter in self.master.linters:
            if linter.sarif_output_file is not None and os.path.isfile(
                linter.sarif_output_file
            ):
                # Read SARIF output file
                load_ok = False
                with open(
                    linter.sarif_output_file, "r", encoding="utf-8"
                ) as linter_sarif_file:
                    # parse sarif file
                    try:
                        linter_sarif_obj = json.load(linter_sarif_file)
                        load_ok = True
                    except JSONDecodeError as e:
                        # JSON decoding error
                        logging.error(
                            f"[SARIF reporter] ERROR: Unable to decode {linter.name} "
                            f"SARIF file {linter.sarif_output_file}"
                        )
                        logging.error(str(e))
                        logging.debug(
                            f"SARIF File content:\n{linter_sarif_file.read()}"
                        )
                    except Exception as e:  # noqa: E722
                        # Other error
                        logging.error(
                            f"[SARIF reporter] ERROR: Unknown error with {linter.name} "
                            f"SARIF file {linter.sarif_output_file}"
                        )
                        logging.error(str(e))
                if load_ok is True:
                    # fix sarif file
                    linter_sarif_obj = self.fix_sarif(linter_sarif_obj, linter)
                    # append to global megalinter sarif run
                    sarif_obj["runs"] += linter_sarif_obj["runs"]
                    # Delete linter SARIF file if LOG_FILE=none
                    if keep_sarif_logs is False and os.path.isfile(
                        linter.sarif_output_file
                    ):
                        os.remove(linter.sarif_output_file)
        result_json = json.dumps(sarif_obj, sort_keys=True, indent=4)
        # Remove workspace prefix from file names
        result_json = normalize_log_string(result_json)
        # Write output file
        sarif_file_name = f"{self.report_folder}{os.path.sep}" + config.get(
            "SARIF_REPORTER_FILE_NAME", DEFAULT_SARIF_REPORT_FILE_NAME
        )
        if os.path.isfile(sarif_file_name):
            # Remove from previous run
            os.remove(sarif_file_name)
        with open(sarif_file_name, "w", encoding="utf-8") as sarif_file:
            sarif_file.write(result_json)
            logging.info(
                f"[SARIF Reporter] Generated {self.name} report: {sarif_file_name}"
            )

    def filter_fields(self, obj, fields_to_keep):
        for field in dir(obj):
            if (
                not field.startswith("__")
                and not callable(getattr(obj, field))
                and (
                    (len(fields_to_keep) > 0 and field not in fields_to_keep)
                    or getattr(obj, field, None) is None
                )
            ):
                try:
                    delattr(obj, field)
                except:  # noqa: E722
                    pass
        return obj

    # Some SARIF linter output contain errors (like references to line 0)
    # We must correct them so SARIF is valid
    def fix_sarif(self, linter_sarif_obj, linter: Linter):
        # browse runs
        if "runs" in linter_sarif_obj:
            for id_run, run in enumerate(linter_sarif_obj["runs"]):

                # Add MegaLinter info
                run_properties = run["properties"] if "properties" in run else {}
                run_properties["megalinter"] = {
                    "linterKey": linter.name,
                    "docUrl": get_linter_doc_url(linter),
                    "linterVersion": linter.get_linter_version(),
                }
                run["properties"] = run_properties

                # Update linter name in case there are duplicates
                if (
                    "tool" in run
                    and "driver" in run["tool"]
                    and "name" in run["tool"]["driver"]
                    and linter.master.megalinter_flavor
                    != "none"  # single linter image case
                ):
                    run["tool"]["driver"]["name"] = (
                        run["tool"]["driver"]["name"]
                        + " (MegaLinter "
                        + linter.name
                        + ")"
                    )

                # fix missing informationUri
                if (
                    "tool" in run
                    and "driver" in run["tool"]
                    and "informationUri" not in run["tool"]["driver"]
                ):
                    run["tool"]["driver"]["informationUri"] = get_linter_doc_url(linter)

                # fix missing version
                if (
                    "tool" in run
                    and "driver" in run["tool"]
                    and "version" not in run["tool"]["driver"]
                ):
                    run["tool"]["driver"]["version"] = linter.get_linter_version()

                # fix duplicate rules property
                if (
                    "tool" in run
                    and "driver" in run["tool"]
                    and "rules" in run["tool"]["driver"]
                ):
                    rules = run["tool"]["driver"]["rules"]
                    rules_updated: list = []
                    for rule in rules:
                        # If duplicate id, update duplicate items ids with a random value
                        if "id" in rule and any(
                            "id" in rule_item and rule_item["id"] == rule["id"]
                            for rule_item in rules_updated
                        ):
                            rule["id"] = (
                                rule["id"]
                                + "_DUPLICATE_"
                                + str(random.randint(1, 99999))
                            )
                        rules_updated += [rule]
                    run["tool"]["driver"]["rules"] = rules_updated

                # fix results property
                if "results" in run:
                    # browse run results
                    for id_result, result in enumerate(run["results"]):
                        if "locations" in result:
                            # browse result locations
                            for id_location, location in enumerate(result["locations"]):
                                if "physicalLocation" in location:
                                    location[
                                        "physicalLocation"
                                    ] = self.fix_sarif_physical_location(
                                        location["physicalLocation"]
                                    )
                                result["locations"][id_location] = location
                        run["results"][id_result] = result
                else:
                    # make sure that there is a results entry so GitHub's SARIF validator doesn't cry
                    run["results"] = []

                # Update run in full list
                linter_sarif_obj["runs"][id_run] = run
        return linter_sarif_obj

    # Replace startLine and endLine in region or contextRegion
    def fix_sarif_physical_location(self, physical_location):
        for location_key in physical_location.keys():
            location_item = physical_location[location_key]
            if "startLine" in location_item and location_item["startLine"] == 0:
                location_item["startLine"] = 1
            if "endLine" in location_item and location_item["endLine"] == 0:
                location_item["endLine"] = 1
            if "startColumn" in location_item and location_item["startColumn"] == 0:
                location_item["startColumn"] = 1
            if "endColumn" in location_item and location_item["endColumn"] == 0:
                location_item["endColumn"] = 1
            physical_location[location_key] = location_item
        return physical_location
