# syntax=docker/dockerfile:1
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START
FROM rhysd/actionlint:latest as actionlint
# shellcheck is a dependency for actionlint

FROM koalaman/shellcheck:stable as shellcheck
# Next FROM line commented because already managed by another linter
# FROM koalaman/shellcheck:stable as shellcheck
FROM mvdan/shfmt:latest-alpine as shfmt
FROM hadolint/hadolint:v2.12.0-alpine as hadolint
FROM mstruebing/editorconfig-checker:2.7.0 as editorconfig-checker
FROM dotenvlinter/dotenv-linter:latest as dotenvlinter
FROM ghcr.io/yannh/kubeconform:latest-alpine as kubeconform
FROM ghcr.io/assignuser/chktex-alpine:latest as chktex
FROM mrtazz/checkmake:latest as checkmake
FROM ghcr.io/phpstan/phpstan:latest-php8.1 as phpstan
FROM yoheimuta/protolint:latest as protolint
FROM --platform=$BUILDPLATFORM alpine:3 AS fetch-ruff
ARG BUILDARCH
RUN --mount=type=cache,target=/var/cache/apk,id=apk-${BUILDARCH},sharing=locked  \
    apk add --update curl
WORKDIR /
ARG TARGETARCH
RUN export DL_LOCATION="https://github.com/charliermarsh/ruff/releases/latest/download/ruff-$([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64" || echo "aarch64")-unknown-linux-musl.tar.gz" \
    && echo "Downloading from ${DL_LOCATION}" \
    && curl --location "${DL_LOCATION}" | tar -xzv
FROM --platform=$BUILDPLATFORM golang:alpine as dustilock-build
RUN mkdir temp && cd temp && go mod init temp && go get -d github.com/checkmarx/dustilock@v1.2.0
ARG BUILDARCH
ARG TARGETARCH
RUN GOOS=linux GOARCH=${TARGETARCH} go install github.com/checkmarx/dustilock@v1.2.0 \
&& ([[ "${BUILDARCH}" == "${TARGETARCH}" ]] && mv bin/dustilock /usr/bin) || mv bin/linux_${TARGETARCH}/dustilock /usr/bin
FROM golang:alpine as dustilock
COPY --from=dustilock-build /usr/bin/dustilock /usr/bin/dustilock
# Verify Binary
RUN /usr/bin/dustilock --version

FROM zricethezav/gitleaks:v8.17.0 as gitleaks
FROM checkmarx/kics:alpine as kics
FROM trufflesecurity/trufflehog:latest as trufflehog
FROM jdkato/vale:latest as vale
FROM lycheeverse/lychee:latest-alpine as lychee
FROM ghcr.io/terraform-linters/tflint:v0.47.0 as tflint
FROM tenable/terrascan:1.18.1 as terrascan
FROM alpine/terragrunt:latest as terragrunt
# Next FROM line commented because already managed by another linter
# FROM alpine/terragrunt:latest as terragrunt
FROM --platform=$BUILDPLATFORM alpine:3 AS cargo-build
WORKDIR /cargo
ENV HOME=/cargo
USER 0
RUN --mount=type=cache,target=/var/cache/apk,id=apk-${BUILDARCH},sharing=locked  \
    apk add --update \
      gcc \
      rustup \
      bash \
      git \
      musl-dev \
      llvm \
      clang \
      curl 
RUN curl --location "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-$([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64" || echo "aarch64")-unknown-linux-musl.tgz" | tar -xzv \
 && mkdir -p /cargo/.cargo/bin \
 && mv cargo-binstall /cargo/.cargo/bin \
 && chown -R 63425:63425 /cargo 
USER 63425
ENV CC_aarch64_unknown_linux_musl=clang \
    AR_aarch64_unknown_linux_musl=llvm-ar \
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld" \
    CC_x86_64_unknown_linux_musl=clang \
    AR_x86_64_unknown_linux_musl=llvm-ar \
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"
ARG TARGETARCH
RUN rustup-init -y --target $([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64-unknown-linux-musl" || echo "aarch64-unknown-linux-musl")

RUN --mount=type=cache,id=cargo-${TARGETARCH},sharing=locked,target=/cargo/.cargo/registry/,uid=63425 \
     . /cargo/.cargo/env \
 && cargo binstall --no-confirm --no-symlinks shellcheck-sarif sarif-fmt --root /tmp --target $([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64-unknown-linux-musl" || echo "aarch64-unknown-linux-musl") 

FROM scratch AS cargo
COPY --link --from=cargo-build /tmp/bin/* /bin/
RUN ["/bin/shellcheck-sarif", "--help"]
RUN ["/bin/sarif-fmt", "--help"]

#FROM__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS build-platform

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#BUILD_PLATFORM_APK__START
RUN apk add --update --no-cache \
                curl \
                openjdk11
#BUILD_PLATFORM_APK__END

#BUILD_PLATFORM_OTHER__START
# SCALA installation
RUN curl --retry-all-errors --retry 10 -fLo coursier https://git.io/coursier-cli && \
        chmod +x coursier \
#
# bash-exec installation
    && printf '#!/bin/bash \n\nif [[ -x "$1" ]]; then exit 0; else echo "Error: File:[$1] is not executable"; exit 1; fi' > /usr/bin/bash-exec \
    && chmod +x /usr/bin/bash-exec \
#
# scalafix installation
    && ./coursier install scalafix --quiet --install-dir /usr/bin && rm -rf /root/.cache
#
#BUILD_PLATFORM_OTHER__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS node_modules

#NPM_APK__START
RUN apk add --update --no-cache \
                npm
#NPM_APK__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

ENV NODE_OPTIONS="--max-old-space-size=8192" \
    NODE_ENV=production
#NPM__START
WORKDIR /node-deps
RUN npm --no-cache install --ignore-scripts --omit=dev \
                sfdx-cli \
                typescript \
                @coffeelint/cli \
                jscpd \
                stylelint \
                stylelint-config-standard \
                stylelint-config-sass-guidelines \
                stylelint-scss \
                gherkin-lint \
                graphql \
                graphql-schema-linter \
                npm-groovy-lint \
                htmlhint \
                eslint \
                eslint-config-airbnb \
                eslint-config-prettier \
                eslint-config-standard \
                eslint-plugin-import \
                eslint-plugin-jest \
                eslint-plugin-node \
                eslint-plugin-prettier \
                eslint-plugin-promise \
                eslint-plugin-vue \
                @babel/core \
                @babel/eslint-parser \
                @microsoft/eslint-formatter-sarif \
                standard \
                prettier \
                @prantlf/jsonlint \
                eslint-plugin-jsonc \
                v8r \
                npm-package-json-lint \
                npm-package-json-lint-config-default \
                eslint-plugin-react \
                eslint-plugin-jsx-a11y \
                markdownlint-cli \
                markdown-link-check \
                markdown-table-formatter \
                @stoplight/spectral-cli \
                secretlint \
                @secretlint/secretlint-rule-preset-recommend \
                @secretlint/secretlint-formatter-sarif \
                cspell \
                sql-lint \
                tekton-lint \
                prettyjson \
                @typescript-eslint/eslint-plugin \
                @typescript-eslint/parser \
                ts-standard  && \
    echo "Cleaning npm cache…" \
    && npm cache clean --force || true \
    && echo "Changing owner of node_modules files…" \
    && chown -R "$(id -u)":"$(id -g)" node_modules # fix for https://github.com/npm/cli/issues/5900 \
    && echo "Removing extra node_module files…" \
    && rm -rf /root/.npm/_cacache \
    && find . -name "*.d.ts" -delete \
    && find . -name "*.map" -delete \
    && find . -name "*.npmignore" -delete \
    && find . -name "*.travis.yml" -delete \
    && find . -name "CHANGELOG.md" -delete \
    && find . -name "README.md" -delete \
    && find . -name ".package-lock.json" -delete \
    && find . -name "package-lock.json" -delete \
    && find . -name "README.md" -delete
WORKDIR /

#NPM__END

FROM scratch AS copy-collector

##############################
# COPY instructions #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#COPY__START
COPY --link --from=node_modules /node-deps /node-deps
COPY --link --from=actionlint /usr/local/bin/actionlint /usr/bin/actionlint
# shellcheck is a dependency for actionlint

COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
COPY --link --from=build-platform /usr/bin/bash-exec /usr/bin/bash-exec
# Next COPY line commented because already managed by another linter
# COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
COPY --link --from=shfmt /bin/shfmt /usr/bin/
COPY --link --from=hadolint /bin/hadolint /usr/bin/hadolint
COPY --link --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker
COPY --link --from=dotenvlinter /dotenv-linter /usr/bin/dotenv-linter
COPY --link --from=revive /usr/bin/revive /usr/bin/revive
COPY --link --from=kubeconform /kubeconform /usr/bin/
COPY --link --from=chktex /usr/bin/chktex /usr/bin/
COPY --link --from=checkmake /checkmake /usr/bin/checkmake
COPY --link --chmod=755 --from=phpstan /composer/vendor/phpstan/phpstan/phpstan.phar /usr/bin/phpstan
COPY --link --from=protolint /usr/local/bin/protolint /usr/bin/
COPY --link --from=fetch-ruff /ruff /usr/bin/ruff
COPY --link --from=dustilock /usr/bin/dustilock /usr/bin/dustilock
COPY --link --from=gitleaks /usr/bin/gitleaks /usr/bin/
COPY --link --from=kics /app/bin/kics /usr/bin/
COPY --from=kics /app/bin/assets /opt/kics/assets/
COPY --link --from=trufflehog /usr/bin/trufflehog /usr/bin/
COPY --link --from=build-platform /usr/bin/scalafix /usr/bin/
COPY --link --from=vale /bin/vale /bin/vale
COPY --link --from=lychee /usr/local/bin/lychee /usr/bin/
COPY --link --from=tflint /usr/local/bin/tflint /usr/bin/
COPY --link --from=terrascan /go/bin/terrascan /usr/bin/
COPY --link --from=terragrunt /usr/local/bin/terragrunt /usr/bin/
COPY --link --from=terragrunt /bin/terraform /usr/bin/
COPY --link --from=cargo /bin/* /usr/bin/
#COPY__END

#######################################
# Copy scripts and rules to container #
#######################################
COPY --link megalinter/descriptors /megalinter-descriptors
COPY --link TEMPLATES /action/lib/.automation

FROM --platform=$TARGETPLATFORM python:3.11.3-alpine3.17 AS target-python
FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS python-venv


#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV_BUILDDEPS__START
RUN apk add --update --no-cache \
                gcc \
                libffi-dev \
                musl-dev \
                make \
                curl \
                openssl-dev \
                g++ \
                cmake
#PIPVENV_BUILDDEPS__END

#PIPVENV_DOWNLOAD__START
RUN --mount=type=cache,id=pip,sharing=locked,target=/var/cache/pip,uid=0 \
    mkdir /download \
    && PYTHONDONTWRITEBYTECODE=1 pip3 --disable-pip-version-check install --cache-dir=/var/cache/pip --upgrade pip crossenv \
&& pip download --cache-dir=/var/cache/pip --dest "/download" \
      ansible-lint \
      cpplint \
      cfn-lint \
      djlint \
      pylint \
      typing-extensions \
      black \
      flake8 \
      isort \
      black \
      bandit \
      bandit_sarif_formatter \
      bandit[toml] \
      mypy \
      pyright \
      packaging \
      checkov \
      semgrep \
      restructuredtext_lint \
      rstcheck \
      rstfmt \
      snakemake \
      snakefmt \
      proselint \
      sqlfluff \
      yamllint 

#PIPVENV_DOWNLOAD__END

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
ENV PATH=${PATH}:/root/.cargo/bin

RUN mkdir /venvs

ARG TARGETPLATFORM
COPY --link --from=target-python /usr/local/bin/python3 /usr/local/bin/target-python3

################################
# Installs python dependencies #
################################
COPY --link megalinter /megalinter
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
    mkdir -p "/venvs/megalinter" \
    && cd "/venvs/megalinter" \
    && python3 -m crossenv /usr/local/bin/target-python3 . \
    && source bin/activate \
    && PYTHONDONTWRITEBYTECODE=1 pip3 install --cache-dir=/var/cache/pip /megalinter

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV__START
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/ansible-lint" \
 && cd "/venvs/ansible-lint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip ansible-lint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/cpplint" \
 && cd "/venvs/cpplint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip cpplint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/cfn-lint" \
 && cd "/venvs/cfn-lint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip cfn-lint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/djlint" \
 && cd "/venvs/djlint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip djlint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/pylint" \
 && cd "/venvs/pylint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip pylint typing-extensions
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/black" \
 && cd "/venvs/black" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip black
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/flake8" \
 && cd "/venvs/flake8" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip flake8
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/isort" \
 && cd "/venvs/isort" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip isort black
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/bandit" \
 && cd "/venvs/bandit" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip bandit bandit_sarif_formatter bandit[toml]
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/mypy" \
 && cd "/venvs/mypy" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip mypy
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/pyright" \
 && cd "/venvs/pyright" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip pyright
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/checkov" \
 && cd "/venvs/checkov" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip packaging checkov
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/semgrep" \
 && cd "/venvs/semgrep" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip semgrep
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/rst-lint" \
 && cd "/venvs/rst-lint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip restructuredtext_lint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/rstcheck" \
 && cd "/venvs/rstcheck" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip rstcheck
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/rstfmt" \
 && cd "/venvs/rstfmt" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip rstfmt
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/snakemake" \
 && cd "/venvs/snakemake" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip snakemake
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/snakefmt" \
 && cd "/venvs/snakefmt" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip snakefmt
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/proselint" \
 && cd "/venvs/proselint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip proselint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/sqlfluff" \
 && cd "/venvs/sqlfluff" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip sqlfluff
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/yamllint" \
 && cd "/venvs/yamllint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip yamllint

#PIPVENV__END

##################
# Get base image #
##################
 # https://stackoverflow.com/a/73711302/699056
FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu

FROM python:3.11.3-alpine3.17 AS final
ARG GITHUB_TOKEN

# https://stackoverflow.com/a/73711302/699056
COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/
# https://stackoverflow.com/a/73711302/699056
# https://stackoverflow.com/a/73359981/699056
# https://stackoverflow.com/a/71209637/699056
RUN apk add --update --no-cache libc6-compat \
                     gcompat \
                     qemu-x86_64

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START
ARG TARGETPLATFORM
ARG PWSH_VERSION='latest'
ARG PWSH_DIRECTORY='/opt/microsoft/powershell'
ARG ARM_TTK_NAME='master.zip'
ARG ARM_TTK_URI='https://github.com/Azure/arm-ttk/archive/master.zip'
ARG ARM_TTK_DIRECTORY='/opt/microsoft'
ARG BICEP_EXE='bicep'
ARG BICEP_DIR='/usr/local/bin'
ARG DART_VERSION='2.8.4'
ARG PMD_VERSION=6.55.0
ARG PSSA_VERSION='latest'
#ARG__END

####################
# Run APK installs #
####################

WORKDIR /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk add --no-cache \
                bash \
                ca-certificates \
                curl \
                gcc \
                git \
                git-lfs \
                libffi-dev \
                make \
                musl-dev \
                openssh \
                docker \
                openrc \
                icu-libs \
                libcurl \
                libintl \
                libssl1.1 \
                libstdc++ \
                lttng-ust-dev \
                zlib \
                zlib-dev \
                openjdk11 \
                perl \
                perl-dev \
                gnupg \
                php81 \
                php81-phar \
                php81-mbstring \
                php81-xmlwriter \
                php81-tokenizer \
                php81-ctype \
                php81-curl \
                php81-dom \
                php81-simplexml \
                dpkg \
                py3-pyflakes \
                nodejs \
                npm \
                yarn \
                go \
                helm \
                gcompat \
                libc6-compat \
                openssl \
                readline-dev \
                g++ \
                libc-dev \
                libgcc \
                libxml2-dev \
                libxml2-utils \
                linux-headers \
                R \
                R-dev \
                R-doc \
                nodejs-current \
                ruby \
                ruby-dev \
                ruby-bundler \
                ruby-rdoc \
    && git config --global core.autocrlf true
#APK__END

# PATH for golang & python
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
    # PYTHONPYCACHEPREFIX="$HOME/.cache/cpython/" NV: not working for all packages :/
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

COPY --link --from=python-venv /venvs /venvs

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#PIP__START

#PIP__END

#PIPVENV_PATH__START
ENV PATH="${PATH}":/venvs/ansible-lint/cross/bin:/venvs/cpplint/cross/bin:/venvs/cfn-lint/cross/bin:/venvs/djlint/cross/bin:/venvs/pylint/cross/bin:/venvs/black/cross/bin:/venvs/flake8/cross/bin:/venvs/isort/cross/bin:/venvs/bandit/cross/bin:/venvs/mypy/cross/bin:/venvs/pyright/cross/bin:/venvs/checkov/cross/bin:/venvs/semgrep/cross/bin:/venvs/rst-lint/cross/bin:/venvs/rstcheck/cross/bin:/venvs/rstfmt/cross/bin:/venvs/snakemake/cross/bin:/venvs/snakefmt/cross/bin:/venvs/proselint/cross/bin:/venvs/sqlfluff/cross/bin:/venvs/yamllint/cross/bin
#PIPVENV_PATH__END

# Add node packages to path #
ENV PATH="/node-deps/node_modules/.bin:${PATH}" \
    NODE_PATH="/node-deps/node_modules"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START
RUN echo 'gem: --no-document' >> ~/.gemrc && \
    gem install \
          scss_lint \
          puppet-lint \
          rubocop \
          rubocop-github \
          rubocop-performance \
          rubocop-rails \
          rubocop-rake \
          rubocop-rspec
#GEM__END

##############################
# Installs rust dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#CARGO__START
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable \
    && export PATH="/root/.cargo/bin:${PATH}" \
    && rustup component add clippy \
    && rm -rf /root/.cargo/registry /root/.cargo/git /root/.cache/sccache
ENV PATH="/root/.cargo/bin:${PATH}"
#CARGO__END

# Don't add link to this one otherwise it doesn't merge correctly
COPY --from=copy-collector / /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START
RUN rc-update add docker boot && rc-service docker start || true
# ARM installation
RUN --mount=type=secret,id=GITHUB_TOKEN case ${TARGETPLATFORM} in \
      "linux/amd64")  POWERSHELL_ARCH=alpine-x64 ;; \
      "linux/arm64")  POWERSHELL_ARCH=arm64      ;; \
    esac \
    && mkdir -p ${PWSH_DIRECTORY} \
    && curl --retry 5 --retry-delay 5 -s \
       -H "Accept: application/vnd.github+json" \
       -H "Authorization: Bearer $(cat /run/secrets/GITHUB_TOKEN)" \
       https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \
        | grep browser_download_url \
        | grep linux-${POWERSHELL_ARCH} \
        | cut -d '"' -f 4 \
        | xargs -n 1 wget -O - \
        | tar -xzC ${PWSH_DIRECTORY} \
    && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh

#
# CLOJURE installation
ENV LANG=C.UTF-8
RUN ALPINE_GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download" && \
    ALPINE_GLIBC_PACKAGE_VERSION="2.34-r0" && \
    ALPINE_GLIBC_BASE_PACKAGE_FILENAME="glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    ALPINE_GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    ALPINE_GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
    apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \
    echo \
        "-----BEGIN PUBLIC KEY-----\
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\
        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\
        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\
        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\
        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\
        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\
        1QIDAQAB\
        -----END PUBLIC KEY-----" | sed 's/   */\n/g' > "/etc/apk/keys/sgerrand.rsa.pub" && \
    wget --quiet --tries=10 --waitretry=10 \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    mv /etc/nsswitch.conf /etc/nsswitch.conf.bak && \
    apk add --no-cache --force-overwrite \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
    \
    mv /etc/nsswitch.conf.bak /etc/nsswitch.conf && \
    rm "/etc/apk/keys/sgerrand.rsa.pub" && \
    (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 "$LANG" || true) && \
    echo "export LANG=$LANG" > /etc/profile.d/locale.sh && \
    \
    apk del glibc-i18n && \
    \
    rm "/root/.wget-hsts" && \
    apk del .build-dependencies && \
    rm \
        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" \
#
# CSHARP installation
    && wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \
    && chmod +x dotnet-install.sh \
    && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 6.0 -version latest

ENV PATH="${PATH}:/root/.dotnet/tools:/usr/share/dotnet"
#
# DART installation
# Next line commented because already managed by another linter
# ENV LANG=C.UTF-8
# Next line commented because already managed by another linter
# RUN ALPINE_GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download" && \
#     ALPINE_GLIBC_PACKAGE_VERSION="2.34-r0" && \
#     ALPINE_GLIBC_BASE_PACKAGE_FILENAME="glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
#     ALPINE_GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
#     ALPINE_GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk" && \
#     apk add --no-cache --virtual=.build-dependencies wget ca-certificates && \
#     echo \
#         "-----BEGIN PUBLIC KEY-----\
#         MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\
#         y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\
#         tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\
#         m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\
#         KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\
#         Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\
#         1QIDAQAB\
#         -----END PUBLIC KEY-----" | sed 's/   */\n/g' > "/etc/apk/keys/sgerrand.rsa.pub" && \
#     wget --quiet --tries=10 --waitretry=10 \
#         "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
#     mv /etc/nsswitch.conf /etc/nsswitch.conf.bak && \
#     apk add --no-cache --force-overwrite \
#         "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME" && \
#     \
#     mv /etc/nsswitch.conf.bak /etc/nsswitch.conf && \
#     rm "/etc/apk/keys/sgerrand.rsa.pub" && \
#     (/usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 "$LANG" || true) && \
#     echo "export LANG=$LANG" > /etc/profile.d/locale.sh && \
#     \
#     apk del glibc-i18n && \
#     \
#     rm "/root/.wget-hsts" && \
#     apk del .build-dependencies && \
#     rm \
#         "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \
#         "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"
#
# JAVA installation
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
ENV PATH="$JAVA_HOME/bin:${PATH}"
#
# PHP installation
RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" \
    && export GITHUB_AUTH_TOKEN \
    && wget --tries=5 -q -O phive.phar https://phar.io/releases/phive.phar \
    && wget --tries=5 -q -O phive.phar.asc https://phar.io/releases/phive.phar.asc \
    && PHAR_KEY_ID="0x9D8A98B29B2D5D79" \
    && ( gpg --keyserver keyserver.pgp.com --recv-keys "$PHAR_KEY_ID" \
        || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$PHAR_KEY_ID" \
        || gpg --keyserver pgp.mit.edu --recv-keys "$PHAR_KEY_ID" \
        || gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "$PHAR_KEY_ID" ) \
    && gpg --verify phive.phar.asc phive.phar \
    && chmod +x phive.phar \
    && mv phive.phar /usr/local/bin/phive \
    && rm phive.phar.asc \
    && update-alternatives --install /usr/bin/php php /usr/bin/php81 110

#
# POWERSHELL installation
RUN --mount=type=secret,id=GITHUB_TOKEN case ${TARGETPLATFORM} in \
      "linux/amd64")  POWERSHELL_ARCH=alpine-x64 ;; \
      "linux/arm64")  POWERSHELL_ARCH=arm64      ;; \
    esac \
    && mkdir -p ${PWSH_DIRECTORY} \
    && curl --retry 5 --retry-delay 5 -s \
       -H "Accept: application/vnd.github+json" \
       -H "Authorization: Bearer $(cat /run/secrets/GITHUB_TOKEN)" \
       https://api.github.com/repos/powershell/powershell/releases/${PWSH_VERSION} \
        | grep browser_download_url \
        | grep linux-${POWERSHELL_ARCH} \
        | cut -d '"' -f 4 \
        | xargs -n 1 wget -O - \
        | tar -xzC ${PWSH_DIRECTORY} \
    && ln -sf ${PWSH_DIRECTORY}/pwsh /usr/bin/pwsh \
    && chmod +x /usr/bin/pwsh

#
# SALESFORCE installation
# Next line commented because already managed by another linter
# ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk
# Next line commented because already managed by another linter
# ENV PATH="$JAVA_HOME/bin:${PATH}"
RUN echo y|sfdx plugins:install sfdx-hardis \
    && npm cache clean --force || true \
    && rm -rf /root/.npm/_cacache

#
# VBDOTNET installation
# Next line commented because already managed by another linter
# RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \
#     && chmod +x dotnet-install.sh \
#     && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 6.0 -version latest
# Next line commented because already managed by another linter
# ENV PATH="${PATH}:/root/.dotnet/tools:/usr/share/dotnet"
#
# arm-ttk installation
ENV ARM_TTK_PSD1="${ARM_TTK_DIRECTORY}/arm-ttk-master/arm-ttk/arm-ttk.psd1"
RUN curl --retry 5 --retry-delay 5 -sLO "${ARM_TTK_URI}" \
    && unzip "${ARM_TTK_NAME}" -d "${ARM_TTK_DIRECTORY}" \
    && rm "${ARM_TTK_NAME}" \
    && ln -sTf "${ARM_TTK_PSD1}" /usr/bin/arm-ttk \
    && chmod a+x /usr/bin/arm-ttk \
#
# bicep_linter installation
    && case ${TARGETPLATFORM} in \
  "linux/amd64")  POWERSHELL_ARCH=musl-x64 ;; \
  "linux/arm64")  POWERSHELL_ARCH=arm64    ;; \
esac \
&& curl --retry 5 --retry-delay 5 -sLo ${BICEP_EXE} "https://github.com/Azure/bicep/releases/latest/download/bicep-linux-${POWERSHELL_ARCH}" \
&& chmod +x "${BICEP_EXE}" \
&& mv "${BICEP_EXE}" "${BICEP_DIR}" \
#
# clj-kondo installation
    && curl --retry 5 --retry-delay 5 -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo \
    && chmod +x install-clj-kondo \
    && ./install-clj-kondo \
#
# cljstyle installation
    && curl --retry 5 --retry-delay 5 -sLO https://raw.githubusercontent.com/greglook/cljstyle/main/script/install-cljstyle \
    && chmod +x install-cljstyle \
    && ./install-cljstyle \
#
# csharpier installation
    && /usr/share/dotnet/dotnet tool install -g csharpier \
#
# dartanalyzer installation
    && case ${TARGETPLATFORM} in \
      "linux/amd64")  DART_ARCH=x64   ;; \
      "linux/arm64")  DART_ARCH=arm64 ;; \
    esac \
    && wget --tries=5 https://storage.googleapis.com/dart-archive/channels/stable/release/${DART_VERSION}/sdk/dartsdk-linux-${DART_ARCH}-release.zip -O - -q | unzip -q - \
    && chmod +x dart-sdk/bin/dart* \
    && mv dart-sdk/bin/* /usr/bin/ && mv dart-sdk/lib/* /usr/lib/ && mv dart-sdk/include/* /usr/include/ \
    && rm -r dart-sdk/ \
#
# golangci-lint installation
    && wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \
    && golangci-lint --version

#
# revive installation
## The golang image used as a builder is a temporary workaround 
## for the released revive binaries not returning version numbers (devel). 
## The install command should then be what is commented in the go.megalinter-descriptor.yml
FROM --platform=$BUILDPLATFORM golang:1-alpine as revive-build
RUN mkdir temp && cd temp && go mod init temp && go get -d github.com/mgechev/revive@latest
ARG BUILDARCH
ARG TARGETARCH
RUN GOOS=linux GOARCH=${TARGETARCH} go install github.com/mgechev/revive@latest \
&& ([[ "${BUILDARCH}" == "${TARGETARCH}" ]] && mv bin/revive /usr/bin) || mv bin/linux_${TARGETARCH}/revive /usr/bin
FROM golang:1-alpine as revive
COPY --from=revive-build /usr/bin/revive /usr/bin/revive
# Verify Binary
RUN /usr/bin/revive --version

#
# checkstyle installation
RUN --mount=type=secret,id=GITHUB_TOKEN CHECKSTYLE_LATEST=$(curl -s \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $(cat /run/secrets/GITHUB_TOKEN)" \
    https://api.github.com/repos/checkstyle/checkstyle/releases/latest \
        | grep browser_download_url \
        | grep ".jar" \
        | cut -d '"' -f 4) \
    && curl --retry 5 --retry-delay 5 -sSL $CHECKSTYLE_LATEST \
        --output /usr/bin/checkstyle

#
# pmd installation
RUN wget --quiet https://github.com/pmd/pmd/releases/download/pmd_releases%2F${PMD_VERSION}/pmd-bin-${PMD_VERSION}.zip && \
    unzip pmd-bin-${PMD_VERSION}.zip && \
    rm pmd-bin-${PMD_VERSION}.zip && \
    mv pmd-bin-${PMD_VERSION} /usr/bin/pmd && \
    chmod +x /usr/bin/pmd/bin/run.sh \
#
# ktlint installation
    && curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \
    chmod a+x ktlint && \
    mv "ktlint" /usr/bin/ \
#
# kubescape installation
    && ln -s /lib/libc.so.6 /usr/lib/libresolv.so.2 && \
    curl --retry 5 --retry-delay 5 -sLv https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash -s -- -v v2.3.6 \
#
# chktex installation
    && cd ~ && touch .chktexrc && cd / \
#
# luacheck installation
    && wget --tries=5 https://www.lua.org/ftp/lua-5.3.5.tar.gz -O - -q | tar -xzf - \
    && cd lua-5.3.5 \
    && make linux \
    && make install \
    && cd .. && rm -r lua-5.3.5/ \
    && wget --tries=5 https://github.com/cvega/luarocks/archive/v3.3.1-super-linter.tar.gz -O - -q | tar -xzf - \
    && cd luarocks-3.3.1-super-linter \
    && ./configure --with-lua-include=/usr/local/include \
    && make \
    && make -b install \
    && cd .. && rm -r luarocks-3.3.1-super-linter/ \
    && luarocks install luacheck \
    && cd / \
#
# perlcritic installation
    && curl --retry 5 --retry-delay 5 -sL https://cpanmin.us/ | perl - -nq --no-wget Perl::Critic
#
# phpcs installation
RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install phpcs -g --trust-gpg-keys 31C7E470E2138192

#
# psalm installation
RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install psalm -g --trust-gpg-keys 8A03EA3B385DBAA1,12CE0F1D262429A5

#
# phplint installation
RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_AUTH_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" && export GITHUB_AUTH_TOKEN && phive --no-progress install overtrue/phplint --force-accept-unsigned -g

#
# powershell installation
RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'
#
# powershell_formatter installation
# Next line commented because already managed by another linter
# RUN pwsh -c 'Install-Module -Name PSScriptAnalyzer -RequiredVersion ${PSSA_VERSION} -Scope AllUsers -Force'
#
# mypy installation
ENV MYPY_CACHE_DIR=/tmp
#
# lintr installation
RUN mkdir -p /home/r-library \
    && cp -r /usr/lib/R/library/ /home/r-library/ \
    && Rscript -e "install.packages(c('lintr','purrr'), repos = 'https://cloud.r-project.org/')" \
    && R -e "install.packages(list.dirs('/home/r-library',recursive = FALSE), repos = NULL, type = 'source')" \
#
# raku installation
    && curl -L https://github.com/nxadm/rakudo-pkg/releases/download/v2020.10-02/rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk > rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \
    && apk add --no-cache --allow-untrusted rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \
    && rm rakudo-pkg-Alpine3.12_2020.10-02_x86_64.apk \
    && /opt/rakudo-pkg/bin/add-rakudo-to-path \
    # && source /root/.profile \
    && /opt/rakudo-pkg/bin/install-zef-as-user

ENV PATH="~/.raku/bin:/opt/rakudo-pkg/bin:/opt/rakudo-pkg/share/perl6/site/bin:$PATH"
#
# devskim installation
# Next line commented because already managed by another linter
# RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \
#     && chmod +x dotnet-install.sh \
#     && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 6.0 -version latest
# Next line commented because already managed by another linter
# ENV PATH="${PATH}:/root/.dotnet/tools:/usr/share/dotnet"
RUN dotnet tool install --global Microsoft.CST.DevSkim.CLI \
#
# grype installation
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin v0.63.1 \
#
# kics installation
    && mkdir -p /opt/kics/assets
ENV KICS_QUERIES_PATH=/opt/kics/assets/queries KICS_LIBRARIES_PATH=/opt/kics/assets/libraries
#
# syft installation
RUN curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin \
#
# trivy installation
    && wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \
#
# trivy-sbom installation
# Next line commented because already managed by another linter
# RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
#
# sfdx-scanner-apex installation
    && sfdx plugins:install @salesforce/sfdx-scanner \
    && npm cache clean --force || true \
    && rm -rf /root/.npm/_cacache \
#
# sfdx-scanner-aura installation
# Next line commented because already managed by another linter
# RUN sfdx plugins:install @salesforce/sfdx-scanner \
#     && npm cache clean --force || true \
#     && rm -rf /root/.npm/_cacache
#
# sfdx-scanner-lwc installation
# Next line commented because already managed by another linter
# RUN sfdx plugins:install @salesforce/sfdx-scanner \
#     && npm cache clean --force || true \
#     && rm -rf /root/.npm/_cacache
#
# tsqllint installation
# Next line commented because already managed by another linter
# RUN wget --tries=5 -q -O dotnet-install.sh https://dot.net/v1/dotnet-install.sh \
#     && chmod +x dotnet-install.sh \
#     && ./dotnet-install.sh --install-dir /usr/share/dotnet -channel 6.0 -version latest
# Next line commented because already managed by another linter
# ENV PATH="${PATH}:/root/.dotnet/tools:/usr/share/dotnet"
    && dotnet tool install --global TSQLLint
#
#OTHER__END

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=all
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.io" \
      org.opencontainers.image.source="https://github.com/oxsecurity/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
COPY --chmod=755 entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
