# syntax=docker/dockerfile:1
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START
FROM --platform=$BUILDPLATFORM alpine:3 AS cargo-build
WORKDIR /cargo
ENV HOME=/cargo
USER 0
RUN --mount=type=cache,target=/var/cache/apk,id=apk-${BUILDARCH},sharing=locked  \
    apk add --update \
      gcc \
      rustup \
      bash \
      git \
      musl-dev \
      llvm \
      clang \
      curl 
RUN curl --location "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-$([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64" || echo "aarch64")-unknown-linux-musl.tgz" | tar -xzv \
 && mkdir -p /cargo/.cargo/bin \
 && mv cargo-binstall /cargo/.cargo/bin \
 && chown -R 63425:63425 /cargo 
USER 63425
ENV CC_aarch64_unknown_linux_musl=clang \
    AR_aarch64_unknown_linux_musl=llvm-ar \
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld" \
    CC_x86_64_unknown_linux_musl=clang \
    AR_x86_64_unknown_linux_musl=llvm-ar \
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"
ARG TARGETARCH
RUN rustup-init -y --target $([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64-unknown-linux-musl" || echo "aarch64-unknown-linux-musl")

RUN --mount=type=cache,id=cargo-${TARGETARCH},sharing=locked,target=/cargo/.cargo/registry/,uid=63425 \
     . /cargo/.cargo/env \
 && cargo binstall --no-confirm --no-symlinks  --root /tmp --target $([[ "${TARGETARCH}" == "amd64" ]] && echo "x86_64-unknown-linux-musl" || echo "aarch64-unknown-linux-musl") 

FROM scratch AS cargo
COPY --link --from=cargo-build /tmp/bin/* /bin/
RUN ["/bin/", "--help"]

#FROM__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS build-platform

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#BUILD_PLATFORM_APK__START

#BUILD_PLATFORM_APK__END

#BUILD_PLATFORM_OTHER__START

#BUILD_PLATFORM_OTHER__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS node_modules

#NPM_APK__START

#NPM_APK__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

ENV NODE_OPTIONS="--max-old-space-size=8192" \
    NODE_ENV=production
#NPM__START

#NPM__END

FROM scratch AS copy-collector

##############################
# COPY instructions #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#COPY__START
COPY --link --from=cargo /bin/* /usr/bin/
#COPY__END

#######################################
# Copy scripts and rules to container #
#######################################
COPY --link megalinter/descriptors /megalinter-descriptors
COPY --link TEMPLATES /action/lib/.automation

FROM --platform=$TARGETPLATFORM python:3.11.3-alpine3.17 AS target-python
FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS python-venv


#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV_BUILDDEPS__START
RUN apk add --update --no-cache \
                gcc \
                libffi-dev \
                musl-dev \
                make \
                curl \
                openssl-dev
#PIPVENV_BUILDDEPS__END

#PIPVENV_DOWNLOAD__START

#PIPVENV_DOWNLOAD__END

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
ENV PATH=${PATH}:/root/.cargo/bin

RUN mkdir /venvs

ARG TARGETPLATFORM
COPY --link --from=target-python /usr/local/bin/python3 /usr/local/bin/target-python3

################################
# Installs python dependencies #
################################
COPY --link megalinter /megalinter
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
    mkdir -p "/venvs/megalinter" \
    && cd "/venvs/megalinter" \
    && python3 -m crossenv /usr/local/bin/target-python3 . \
    && source bin/activate \
    && PYTHONDONTWRITEBYTECODE=1 pip3 install --cache-dir=/var/cache/pip /megalinter

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV__START

#PIPVENV__END

##################
# Get base image #
##################
 # https://stackoverflow.com/a/73711302/699056
FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu

FROM python:3.11.3-alpine3.17 AS final
ARG GITHUB_TOKEN

# https://stackoverflow.com/a/73711302/699056
COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/
# https://stackoverflow.com/a/73711302/699056
# https://stackoverflow.com/a/73359981/699056
# https://stackoverflow.com/a/71209637/699056
RUN apk add --update --no-cache libc6-compat \
                     gcompat \
                     qemu-x86_64

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START

#ARG__END

####################
# Run APK installs #
####################

WORKDIR /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk add --no-cache \
                bash \
                ca-certificates \
                curl \
                gcc \
                git \
                git-lfs \
                libffi-dev \
                make \
                musl-dev \
                openssh \
    && git config --global core.autocrlf true
#APK__END

# PATH for golang & python
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
    # PYTHONPYCACHEPREFIX="$HOME/.cache/cpython/" NV: not working for all packages :/
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

COPY --link --from=python-venv /venvs /venvs

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#PIP__START

#PIP__END

#PIPVENV_PATH__START

#PIPVENV_PATH__END

# Add node packages to path #
ENV PATH="/node-deps/node_modules/.bin:${PATH}" \
    NODE_PATH="/node-deps/node_modules"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START

#GEM__END

##############################
# Installs rust dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#CARGO__START
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable \
    && export PATH="/root/.cargo/bin:${PATH}" \
    && rustup component add clippy \
    && rm -rf /root/.cargo/registry /root/.cargo/git /root/.cache/sccache
ENV PATH="/root/.cargo/bin:${PATH}"
#CARGO__END

# Don't add link to this one otherwise it doesn't merge correctly
COPY --from=copy-collector / /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START

#OTHER__END

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=none
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.io" \
      org.opencontainers.image.source="https://github.com/oxsecurity/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
ENV ENABLE_LINTERS=RUST_CLIPPY \
    FLAVOR_SUGGESTIONS=false \
    SINGLE_LINTER=RUST_CLIPPY \
    PRINT_ALPACA=false \
    LOG_FILE=none \
    SARIF_REPORTER=true \
    TEXT_REPORTER=false \
    UPDATED_SOURCES_REPORTER=false \
    GITHUB_STATUS_REPORTER=false \
    GITHUB_COMMENT_REPORTER=false \
    EMAIL_REPORTER=false \
    FILEIO_REPORTER=false \
    CONFIG_REPORTER=false \
    SARIF_TO_HUMAN=false
RUN mkdir /root/docker_ssh && mkdir /usr/bin/megalinter-sh
EXPOSE 22
COPY entrypoint.sh /entrypoint.sh
COPY sh /usr/bin/megalinter-sh
COPY sh/megalinter_exec /usr/bin/megalinter_exec
COPY sh/motd /etc/motd
RUN find /usr/bin/megalinter-sh/ -type f -iname "*.sh" -exec chmod +x {} \; && \
    chmod +x entrypoint.sh && \
    chmod +x /usr/bin/megalinter_exec && \
    echo "alias megalinter='python -m megalinter.run'" >> ~/.bashrc && source ~/.bashrc && \
    echo "alias megalinter_exec='/usr/bin/megalinter_exec'" >> ~/.bashrc && source ~/.bashrc
RUN export STANDALONE_LINTER_VERSION="$(python -m megalinter.run --input /tmp --linterversion)" && \
    echo $STANDALONE_LINTER_VERSION
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
