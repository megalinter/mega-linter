# MEGA-LINTER FLAVOR [terraform]: Optimized for TERRAFORM based projects
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START
FROM hadolint/hadolint:v2.8.0-alpine as hadolint
FROM yoheimuta/protolint:latest as protolint
FROM zricethezav/gitleaks:latest as gitleaks
FROM ghcr.io/terraform-linters/tflint:latest as tflint
FROM accurics/terrascan:latest as terrascan
FROM alpine/terragrunt:latest as terragrunt
FROM checkmarx/kics:alpine as kics
#FROM__END

##################
# Get base image #
##################
FROM python:3.9.7-alpine3.13

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START

#ARG__END

####################
# Run APK installs #
####################

# APK Packages used by mega-linter core architecture
RUN apk add --update --no-cache \
        bash \
        curl \
        gcc \
        git \
        libffi-dev \
        make \
        musl-dev \
        openssh && \
    git config --global core.autocrlf true

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk add --update --no-cache \
                go \
                bash \
                openjdk8 \
                nodejs \
                npm \
                yarn \
                libc-dev \
                libxml2-dev \
                libxml2-utils \
                libgcc \
                ruby \
                ruby-dev \
                ruby-bundler \
                ruby-rdoc
#APK__END

# PATH for golang
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#PIP__START
RUN pip3 install --no-cache-dir --upgrade \
          'ansible' \
          'ansible-lint[yamllint]' \
          'semgrep' \
          'snakemake' \
          'snakefmt' \
          'sqlfluff' \
          'yamllint'
#PIP__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

# Downgrade npm because from npm@v7, npm install crashes when called from root directory within Dockerfile
RUN npm install npm@latest-6 -g || true
# Disable package-lock.json to avoid sudden crash. Try to remove later if possible
RUN echo 'package-lock=false' >> .npmrc || true
ENV NODE_OPTIONS="--max-old-space-size=8192"
#NPM__START
RUN npm install --no-cache --ignore-scripts \
                jscpd@3.3.26 \
                stylelint \
                stylelint-config-standard \
                stylelint-config-sass-guidelines \
                stylelint-scss \
                editorconfig-checker \
                graphql-schema-linter \
                npm-groovy-lint \
                htmlhint \
                jsonlint \
                eslint \
                eslint-plugin-jsonc \
                @microsoft/eslint-formatter-sarif \
                v8r@0.6.1 \
                prettier \
                markdownlint-cli \
                remark-cli \
                remark-preset-lint-recommended \
                markdown-link-check \
                markdown-table-formatter \
                @stoplight/spectral@5.6.0 \
                secretlint@4.1.0 \
                @secretlint/secretlint-rule-preset-recommend@4.1.0 \
                cspell \
                sql-lint \
                tekton-lint
#NPM__END

# Add node packages to path #
ENV PATH="/node_modules/.bin:${PATH}"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START
RUN echo 'gem: --no-document' >> ~/.gemrc && \
    gem install \
          scss_lint \
          goodcheck
#GEM__END

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START
# actionlint installation
ENV GO111MODULE=on
RUN go get github.com/rhysd/actionlint/cmd/actionlint

# bash-exec installation
RUN printf '#!/bin/bash \n\nif [[ -x "$1" ]]; then exit 0; else echo "Error: File:[$1] is not executable"; exit 1; fi' > /usr/bin/bash-exec \
    && chmod +x /usr/bin/bash-exec


# shellcheck installation
RUN wget -qO- "https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz" | tar -xJv \
    && cp "shellcheck-stable/shellcheck" /usr/bin/ \
    && shellcheck --version


# shfmt installation
# Next line commented because already managed by another linter
# ENV GO111MODULE=on
RUN go get mvdan.cc/sh/v3/cmd/shfmt@v3.3.1

# hadolint installation
COPY --from=hadolint /bin/hadolint /usr/bin/hadolint

# dotenv-linter installation
RUN wget -q -O - https://raw.githubusercontent.com/dotenv-linter/dotenv-linter/master/install.sh | sh -s

# ktlint installation
RUN curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \
    chmod a+x ktlint && \
    mv "ktlint" /usr/bin/


# kubeval installation
RUN wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz \
    && tar xf kubeval-linux-amd64.tar.gz \
    && cp kubeval /usr/local/bin


# protolint installation
COPY --from=protolint /usr/local/bin/protolint /usr/bin/

# gitleaks installation
COPY --from=gitleaks /usr/bin/gitleaks /usr/bin/

# trivy installation
RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.22.0 && \
    wget --tries=5 -q -O /usr/local/bin/sarif.tpl https://raw.githubusercontent.com/aquasecurity/trivy/714b5ca2460363e082d42a8d933c7a0cb7eff7a8/contrib/sarif.tpl && \
    chmod 644 /usr/local/bin/sarif.tpl


# misspell installation
RUN curl -L -o ./install-misspell.sh https://git.io/misspell \
    && sh ./install-misspell.sh


# tflint installation
COPY --from=tflint /usr/local/bin/tflint /usr/bin/

# terrascan installation
COPY --from=terrascan /go/bin/terrascan /usr/bin/
RUN terrascan init

# terragrunt installation
COPY --from=terragrunt /usr/local/bin/terragrunt /usr/bin/

# terraform-fmt installation
COPY --from=terragrunt /bin/terraform /usr/bin/

# checkov installation
RUN pip3 install --upgrade --no-cache-dir pip && pip3 install --upgrade --no-cache-dir setuptools \
    && pip3 install --no-cache-dir checkov


# kics installation
COPY --from=kics /app/bin/kics /usr/bin/
RUN mkdir -p /opt/kics/assets
ENV KICS_QUERIES_PATH=/opt/kics/assets/queries KICS_LIBRARIES_PATH=/opt/kics/assets/libraries
COPY --from=kics /app/bin/assets /opt/kics/assets/

#OTHER__END

################################
# Installs python dependencies #
################################
COPY megalinter /megalinter
RUN python /megalinter/setup.py install \
    && python /megalinter/setup.py clean --all \
    && rm -rf /var/cache/apk/*

#######################################
# Copy scripts and rules to container #
#######################################
COPY megalinter/descriptors /megalinter-descriptors
COPY TEMPLATES /action/lib/.automation

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=terraform
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.github.io" \
      org.opencontainers.image.source="https://github.com/megalinter/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.github.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
