# syntax=docker/dockerfile:1
# MEGALINTER FLAVOR [go]: Optimized for GO based projects
###########################################
###########################################
## Dockerfile to run MegaLinter ##
###########################################
###########################################

# @not-generated

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#FROM__START
FROM rhysd/actionlint:latest as actionlint
# shellcheck is a dependency for actionlint

FROM koalaman/shellcheck:stable as shellcheck
# Next FROM line commented because already managed by another linter
# FROM koalaman/shellcheck:stable as shellcheck
FROM mvdan/shfmt:latest-alpine as shfmt
FROM hadolint/hadolint:v2.12.0-alpine as hadolint
FROM mstruebing/editorconfig-checker:2.7.0 as editorconfig-checker
FROM dotenvlinter/dotenv-linter:latest as dotenvlinter
FROM --platform=$BUILDPLATFORM golang:1-alpine as revive-build
## The golang image used as a builder is a temporary workaround 
## for the released revive binaries not returning version numbers (devel). 
## The install command should then be what is commented in the go.megalinter-descriptor.yml
RUN mkdir temp && cd temp && go mod init temp && go get -d github.com/mgechev/revive@latest
ARG BUILDARCH
ARG TARGETARCH
RUN GOOS=linux GOARCH=${TARGETARCH} go install github.com/mgechev/revive@latest \
&& ([[ "${BUILDARCH}" == "${TARGETARCH}" ]] && mv bin/revive /usr/bin) || mv bin/linux_${TARGETARCH}/revive /usr/bin
FROM golang:1-alpine as revive
COPY --from=revive-build /usr/bin/revive /usr/bin/revive
# Verify Binary
RUN /usr/bin/revive --version

FROM ghcr.io/yannh/kubeconform:latest-alpine as kubeconform
FROM mrtazz/checkmake:latest as checkmake
FROM yoheimuta/protolint:latest as protolint
FROM zricethezav/gitleaks:v8.17.0 as gitleaks
FROM trufflesecurity/trufflehog:latest as trufflehog
FROM jdkato/vale:latest as vale
FROM lycheeverse/lychee:latest-alpine as lychee
#FROM__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS build-platform

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#BUILD_PLATFORM_APK__START

#BUILD_PLATFORM_APK__END

#BUILD_PLATFORM_OTHER__START
# bash-exec installation
RUN printf '#!/bin/bash \n\nif [[ -x "$1" ]]; then exit 0; else echo "Error: File:[$1] is not executable"; exit 1; fi' > /usr/bin/bash-exec \
    && chmod +x /usr/bin/bash-exec

#
#BUILD_PLATFORM_OTHER__END

FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS node_modules

#NPM_APK__START
RUN apk add --update --no-cache \
                npm
#NPM_APK__END

############################
# Install NPM dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

ENV NODE_OPTIONS="--max-old-space-size=8192" \
    NODE_ENV=production
#NPM__START
WORKDIR /node-deps
RUN npm --no-cache install --ignore-scripts --omit=dev \
                jscpd \
                stylelint \
                stylelint-config-standard \
                stylelint-config-sass-guidelines \
                stylelint-scss \
                graphql \
                graphql-schema-linter \
                npm-groovy-lint \
                htmlhint \
                @prantlf/jsonlint \
                eslint \
                eslint-plugin-jsonc \
                @microsoft/eslint-formatter-sarif \
                v8r \
                prettier \
                markdownlint-cli \
                markdown-link-check \
                markdown-table-formatter \
                @stoplight/spectral-cli \
                secretlint \
                @secretlint/secretlint-rule-preset-recommend \
                @secretlint/secretlint-formatter-sarif \
                cspell \
                sql-lint \
                tekton-lint  && \
    echo "Cleaning npm cache…" \
    && npm cache clean --force || true \
    && echo "Changing owner of node_modules files…" \
    && chown -R "$(id -u)":"$(id -g)" node_modules # fix for https://github.com/npm/cli/issues/5900 \
    && echo "Removing extra node_module files…" \
    && rm -rf /root/.npm/_cacache \
    && find . -name "*.d.ts" -delete \
    && find . -name "*.map" -delete \
    && find . -name "*.npmignore" -delete \
    && find . -name "*.travis.yml" -delete \
    && find . -name "CHANGELOG.md" -delete \
    && find . -name "README.md" -delete \
    && find . -name ".package-lock.json" -delete \
    && find . -name "package-lock.json" -delete \
    && find . -name "README.md" -delete
WORKDIR /

#NPM__END

FROM scratch AS copy-collector

##############################
# COPY instructions #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#COPY__START
COPY --link --from=actionlint /usr/local/bin/actionlint /usr/bin/actionlint
# shellcheck is a dependency for actionlint

COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
COPY --link --from=build-platform /usr/bin/bash-exec /usr/bin/bash-exec
# Next COPY line commented because already managed by another linter
# COPY --link --from=shellcheck /bin/shellcheck /usr/bin/shellcheck
COPY --link --from=shfmt /bin/shfmt /usr/bin/
COPY --link --from=node_modules /node-deps /node-deps
COPY --link --from=hadolint /bin/hadolint /usr/bin/hadolint
COPY --link --from=editorconfig-checker /usr/bin/ec /usr/bin/editorconfig-checker
COPY --link --from=dotenvlinter /dotenv-linter /usr/bin/dotenv-linter
COPY --link --from=revive /usr/bin/revive /usr/bin/revive
COPY --link --from=kubeconform /kubeconform /usr/bin/
COPY --link --from=checkmake /checkmake /usr/bin/checkmake
COPY --link --from=protolint /usr/local/bin/protolint /usr/bin/
COPY --link --from=gitleaks /usr/bin/gitleaks /usr/bin/
COPY --link --from=trufflehog /usr/bin/trufflehog /usr/bin/
COPY --link --from=vale /bin/vale /bin/vale
COPY --link --from=lychee /usr/local/bin/lychee /usr/bin/
#COPY__END

#######################################
# Copy scripts and rules to container #
#######################################
COPY --link megalinter/descriptors /megalinter-descriptors
COPY --link TEMPLATES /action/lib/.automation

FROM --platform=$TARGETPLATFORM python:3.11.3-alpine3.17 AS target-python
FROM --platform=$BUILDPLATFORM python:3.11.3-alpine3.17 AS python-venv


#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV_BUILDDEPS__START
RUN apk add --update --no-cache \
                gcc \
                libffi-dev \
                musl-dev \
                make \
                curl \
                openssl-dev \
                g++ \
                cmake
#PIPVENV_BUILDDEPS__END

#PIPVENV_DOWNLOAD__START
RUN --mount=type=cache,id=pip,sharing=locked,target=/var/cache/pip,uid=0 \
    mkdir /download \
    && PYTHONDONTWRITEBYTECODE=1 pip3 --disable-pip-version-check install --cache-dir=/var/cache/pip --upgrade pip crossenv wheel \
&& pip download --cache-dir=/var/cache/pip --dest "/download" \
      ansible-lint \
      djlint \
      packaging \
      checkov \
      semgrep \
      snakemake \
      snakefmt \
      proselint \
      sqlfluff \
      yamllint 

#PIPVENV_DOWNLOAD__END

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
ENV PATH=${PATH}:/root/.cargo/bin

RUN mkdir /venvs

ARG TARGETPLATFORM
COPY --link --from=target-python /usr/local/bin/python3 /usr/local/bin/target-python3

################################
# Installs python dependencies #
################################
COPY --link megalinter /megalinter
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
    mkdir -p "/venvs/megalinter" \
    && cd "/venvs/megalinter" \
    && python3 -m crossenv /usr/local/bin/target-python3 . \
    && source bin/activate \
    && PYTHONDONTWRITEBYTECODE=1 pip3 install --cache-dir=/var/cache/pip /megalinter

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#PIPVENV__START
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/ansible-lint" \
 && cd "/venvs/ansible-lint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip ansible-lint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/djlint" \
 && cd "/venvs/djlint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip djlint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/checkov" \
 && cd "/venvs/checkov" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip packaging checkov
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/semgrep" \
 && cd "/venvs/semgrep" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip semgrep
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/snakemake" \
 && cd "/venvs/snakemake" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip snakemake
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/snakefmt" \
 && cd "/venvs/snakefmt" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip snakefmt
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/proselint" \
 && cd "/venvs/proselint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip proselint
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/sqlfluff" \
 && cd "/venvs/sqlfluff" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip sqlfluff
RUN --mount=type=cache,id=pip,sharing=shared,target=/var/cache/pip,uid=0 \
   mkdir -p "/venvs/yamllint" \
 && cd "/venvs/yamllint" \
 && python3 -m crossenv /usr/local/bin/target-python3 . \
 && source bin/activate \
 && PYTHONDONTWRITEBYTECODE=1  pip3 --disable-pip-version-check install --find-links=/download --cache-dir=/var/cache/pip yamllint

#PIPVENV__END

##################
# Get base image #
##################
 # https://stackoverflow.com/a/73711302/699056
FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu

FROM python:3.11.3-alpine3.17 AS final
ARG GITHUB_TOKEN

# https://stackoverflow.com/a/73711302/699056
COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/
# https://stackoverflow.com/a/73711302/699056
# https://stackoverflow.com/a/73359981/699056
# https://stackoverflow.com/a/71209637/699056
RUN apk add --update --no-cache libc6-compat \
                     gcompat \
                     qemu-x86_64

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#ARG__START

#ARG__END

####################
# Run APK installs #
####################

WORKDIR /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#APK__START
RUN apk add --no-cache \
                bash \
                ca-certificates \
                curl \
                gcc \
                git \
                git-lfs \
                libffi-dev \
                make \
                musl-dev \
                openssh \
                openjdk11 \
                py3-pyflakes \
                nodejs \
                npm \
                yarn \
                go \
                helm \
                gcompat \
                libc6-compat \
                libstdc++ \
                libc-dev \
                libxml2-dev \
                libxml2-utils \
                libgcc \
                nodejs-current \
                ruby \
                ruby-dev \
                ruby-bundler \
                ruby-rdoc \
    && git config --global core.autocrlf true
#APK__END

# PATH for golang & python
ENV GOROOT=/usr/lib/go \
    GOPATH=/go
    # PYTHONPYCACHEPREFIX="$HOME/.cache/cpython/" NV: not working for all packages :/
# hadolint ignore=DL3044
ENV PATH="$PATH":"$GOROOT"/bin:"$GOPATH"/bin
RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin || true && \
    # Ignore npm package issues
    yarn config set ignore-engines true || true

COPY --link --from=python-venv /venvs /venvs

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#PIP__START

#PIP__END

#PIPVENV_PATH__START
ENV PATH="${PATH}":/venvs/ansible-lint/cross/bin:/venvs/djlint/cross/bin:/venvs/checkov/cross/bin:/venvs/semgrep/cross/bin:/venvs/snakemake/cross/bin:/venvs/snakefmt/cross/bin:/venvs/proselint/cross/bin:/venvs/sqlfluff/cross/bin:/venvs/yamllint/cross/bin
#PIPVENV_PATH__END

# Add node packages to path #
ENV PATH="/node-deps/node_modules/.bin:${PATH}" \
    NODE_PATH="/node-deps/node_modules"

##############################
# Installs ruby dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#GEM__START
RUN echo 'gem: --no-document' >> ~/.gemrc && \
    gem install \
          scss_lint
#GEM__END

##############################
# Installs rust dependencies #
#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################

#CARGO__START

#CARGO__END

# Don't add link to this one otherwise it doesn't merge correctly
COPY --from=copy-collector / /

#############################################################################################
## @generated by .automation/build.py using descriptor files, please do not update manually ##
#############################################################################################
#OTHER__START
# golangci-lint installation
RUN wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh \
    && golangci-lint --version \
#
# ktlint installation
    && curl --retry 5 --retry-delay 5 -sSLO https://github.com/pinterest/ktlint/releases/latest/download/ktlint && \
    chmod a+x ktlint && \
    mv "ktlint" /usr/bin/ \
#
# kubescape installation
    && ln -s /lib/libc.so.6 /usr/lib/libresolv.so.2 && \
    curl --retry 5 --retry-delay 5 -sLv https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash -s -- -v v2.3.6 \
#
# grype installation
    && curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin v0.63.1 \
#
# trivy installation
    && wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

#
# trivy-sbom installation
# Next line commented because already managed by another linter
# RUN wget --tries=5 -q -O - https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
#
#OTHER__END

###########################
# Get the build arguments #
###########################
ARG BUILD_DATE
ARG BUILD_REVISION
ARG BUILD_VERSION

#################################################
# Set ENV values used for debugging the version #
#################################################
ENV BUILD_DATE=$BUILD_DATE \
    BUILD_REVISION=$BUILD_REVISION \
    BUILD_VERSION=$BUILD_VERSION

#FLAVOR__START
ENV MEGALINTER_FLAVOR=go
#FLAVOR__END

#########################################
# Label the instance and set maintainer #
#########################################
LABEL com.github.actions.name="MegaLinter" \
      com.github.actions.description="The ultimate linters aggregator to make sure your projects are clean" \
      com.github.actions.icon="code" \
      com.github.actions.color="red" \
      maintainer="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$BUILD_REVISION \
      org.opencontainers.image.version=$BUILD_VERSION \
      org.opencontainers.image.authors="Nicolas Vuillamy <nicolas.vuillamy@gmail.com>" \
      org.opencontainers.image.url="https://megalinter.io" \
      org.opencontainers.image.source="https://github.com/oxsecurity/megalinter" \
      org.opencontainers.image.documentation="https://megalinter.io" \
      org.opencontainers.image.vendor="Nicolas Vuillamy" \
      org.opencontainers.image.description="Lint your code base with GitHub Actions"

#EXTRA_DOCKERFILE_LINES__START
COPY --chmod=755 entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
#EXTRA_DOCKERFILE_LINES__END
